[{"C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\api\\hello.js":"1","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\create-nft.js":"2","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\dashboard.js":"3","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\index.js":"4","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\my-nfts.js":"5","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\resell-nft.js":"6","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\_app.js":"7"},{"size":170,"mtime":1654646176085,"results":"8","hashOfConfig":"9"},{"size":4086,"mtime":1655070838187,"results":"10","hashOfConfig":"9"},{"size":2377,"mtime":1655076222928,"results":"11","hashOfConfig":"9"},{"size":5352,"mtime":1655086138104,"results":"12","hashOfConfig":"9"},{"size":3353,"mtime":1655150698711,"results":"13","hashOfConfig":"9"},{"size":2098,"mtime":1655071197240,"results":"14","hashOfConfig":"9"},{"size":2243,"mtime":1655150499622,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1igdjyg",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\api\\hello.js",[],[],"C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\create-nft.js",["43","44"],[],"import { useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client' // way to interact with IPFS for up/downloading files\r\nimport { useRouter } from 'next/router' // hook - allows us to programatically route two diifrent rountes and read values off the route uri\r\nimport Web3Modal from 'web3modal'\r\n\r\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nimport {\r\n  marketplaceAddress\r\n} from '../config'\r\n\r\nimport NFTMarketplace from '../artifacts/contracts/NFTMarketplace.sol/NFTMarketplace.json' // NFTMarket place reference\r\n\r\nexport default function CreateItem() {\r\n  const [fileUrl, setFileUrl] = useState(null) // for ipfs file that user will upload - createing and updating the file url\r\n  const [formInput, updateFormInput] = useState({ price: '', name: '', description: '' }) // we passed an object\r\n  // this allows to create nft, set the price, name, etc\r\n  \r\n  const router = useRouter() // hook - \r\n\r\n  async function onChange(e) {     // e means event\r\n    const file = e.target.files[0]\r\n    try {\r\n      const added = await client.add(                 // try-catch block\r\n        file,\r\n        {\r\n          progress: (prog) => console.log(`received: ${prog}`)\r\n        }\r\n      )\r\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n      setFileUrl(url)\r\n    } catch (error) {\r\n      console.log('Error uploading file: ', error)\r\n    }  \r\n  }\r\n  async function uploadToIPFS() {\r\n    const { name, description, price } = formInput\r\n    if (!name || !description || !price || !fileUrl) return\r\n    /* first, upload metadata to IPFS */\r\n    const data = JSON.stringify({\r\n      name, description, image: fileUrl\r\n    })\r\n    try {\r\n      const added = await client.add(data)\r\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n      /* after file is uploaded to IPFS, return the URL to use it in the transaction */\r\n      return url\r\n    } catch (error) {\r\n      console.log('Error uploading file: ', error)\r\n    }  \r\n  }\r\n\r\n  async function listNFTForSale() {\r\n    const url = await uploadToIPFS()\r\n    const web3Modal = new Web3Modal()\r\n    const connection = await web3Modal.connect()\r\n    const provider = new ethers.providers.Web3Provider(connection)\r\n    const signer = provider.getSigner()\r\n\r\n    /* next, create the item */\r\n    const price = ethers.utils.parseUnits(formInput.price, 'ether')\r\n    let contract = new ethers.Contract(marketplaceAddress, NFTMarketplace.abi, signer)\r\n    let listingPrice = await contract.getListingPrice()\r\n    listingPrice = listingPrice.toString()\r\n    let transaction = await contract.createToken(url, price, { value: listingPrice })\r\n    await transaction.wait()\r\n   \r\n    router.push('/')\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      <div className=\"w-1/2 flex flex-col pb-6\">\r\n        <br></br>\r\n        <br></br>\r\n        <div className='text-white text-center text-3xl'> mint and list your NFTs here</div>\r\n        <br></br>\r\n        <input \r\n          placeholder=\"Asset Name\"\r\n          className=\"mt-8 border rounded p-2\"\r\n          onChange={e => updateFormInput({ ...formInput, name: e.target.value })}\r\n        />\r\n        <textarea\r\n          placeholder=\"Asset Description\"\r\n          className=\"mt-2 border rounded p-2\"\r\n          onChange={e => updateFormInput({ ...formInput, description: e.target.value })}\r\n        />\r\n        <input\r\n          placeholder=\"Asset Price in MATIC\"\r\n          className=\"mt-2 border rounded p-2\"\r\n          onChange={e => updateFormInput({ ...formInput, price: e.target.value })}\r\n        />\r\n        <input\r\n          type=\"file\"\r\n          name=\"Asset\"\r\n          className=\"my-4\"\r\n          onChange={onChange}\r\n        />\r\n        {\r\n          fileUrl && (\r\n            <img className=\"rounded mt-4\" width=\"350\" src={fileUrl} />\r\n          )\r\n        }\r\n        <button onClick={listNFTForSale} className=\"font-bold mt-4 bg-lime-600 text-white rounded p-4 shadow-lg text-lg\">\r\n          Mint NFT\r\n        </button>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\dashboard.js",["45","46"],[],"import { ethers } from 'ethers'\r\nimport { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport Web3Modal from 'web3modal'\r\n\r\nimport {\r\n  marketplaceAddress\r\n} from '../config'\r\n\r\nimport NFTMarketplace from '../artifacts/contracts/NFTMarketplace.sol/NFTMarketplace.json'\r\n\r\nexport default function CreatorDashboard() {\r\n  const [nfts, setNfts] = useState([])                                              // created NFTs \r\n  const [loadingState, setLoadingState] = useState('not-loaded')                  \r\n  useEffect(() => {\r\n    loadNFTs()\r\n  }, [])\r\n  async function loadNFTs() {\r\n    const web3Modal = new Web3Modal({\r\n      network: 'mainnet',\r\n      cacheProvider: true,\r\n    })\r\n    const connection = await web3Modal.connect()\r\n    const provider = new ethers.providers.Web3Provider(connection)\r\n    const signer = provider.getSigner()\r\n\r\n    const contract = new ethers.Contract(marketplaceAddress, NFTMarketplace.abi, signer)\r\n    const data = await contract.fetchItemsListed()\r\n\r\n    const items = await Promise.all(data.map(async i => {\r\n      const tokenUri = await contract.tokenURI(i.tokenId)\r\n      const meta = await axios.get(tokenUri)\r\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\r\n      let item = {\r\n        price,\r\n        tokenId: i.tokenId.toNumber(),\r\n        seller: i.seller,\r\n        owner: i.owner,\r\n        image: meta.data.image,\r\n      }\r\n      return item\r\n    }))\r\n\r\n    setNfts(items)\r\n    setLoadingState('loaded') \r\n  }\r\n  if (loadingState === 'loaded' && !nfts.length) return (<h1 className=\"py-10 px-20 text-3xl text-white\">No NFTs listed</h1>)\r\n  return (\r\n    <div>\r\n      <br></br>\r\n        <div className='text-white text-center text-3xl'> My Listed NFTs</div>\r\n        <br></br>\r\n      <div className=\"p-4\">\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-6 gap-4 pt-4\">\r\n          {\r\n            nfts.map((nft, i) => (\r\n              <div key={i} className=\"border shadow rounded-xl overflow-hidden\">\r\n                <img src={nft.image} className=\"rounded\" />\r\n                <div className=\"p-4 bg-black\">\r\n                  <p className=\"text-xl font-semibold text-white\">Price - {nft.price} MATIC</p>\r\n                </div>\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n      <br></br>\r\n      <br></br>\r\n    </div>\r\n  )\r\n}","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\index.js",["47","48"],[],"/* pages/index.js */\nimport { ethers } from 'ethers'\nimport { useEffect, useState } from 'react' \n// hooks - useState - keep up with local states, useEffect - invoke a function when a component loads\nimport axios from 'axios' // data fetching library\nimport Web3Modal from 'web3modal' // medium to connect to eth/matic wallet\n\nimport {\n  marketplaceAddress\n} from '../config'\n\n// json representation of our smart contracts and it allows us to interact with the front end\nimport NFTMarketplace from '../artifacts/contracts/NFTMarketplace.sol/NFTMarketplace.json'\n\nexport default function Home() {\n  const [nfts, setNfts] = useState([])\n  // when app loads we dont have nfts, then we call the sc, we will fetch that array and update the local state\n\n  const [loadingState, setLoadingState] = useState('not-loaded')\n  // we can show or hide our UI\n\n  useEffect(() => {\n    loadNFTs()\n  }, [])\n\n  // we want loadNFTs to load automatically when app loads, so we used useEffect hook\n  async function loadNFTs() {\n    /* create a generic provider and query for unsold market items, we will work with ethers.providers */\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // this will be used to deploy on local network\n    //const provider = new ethers.providers.JsonRpcProvider() \n\n\n    // this will be used to deploy on matic mumbai network\n    //const provider = new ethers.providers.JsonRpcProvider(\"https://rpc-mumbai.maticvigil.com\")\n    const provider = new ethers.providers.JsonRpcProvider(\"https://polygon-mumbai.infura.io/v3/994ab600d3a94aba9a0c1310b744a0e5\")\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // used a very generic provider since we really dont want to know much about the provider\n    const contract = new ethers.Contract(marketplaceAddress, NFTMarketplace.abi, provider)\n    const data = await contract.fetchMarketItems()\n    // we are going to fetch the market items and then we need yo map over the market items and we want to map the token uri by interacting with the token uri ----------------- this will return the array for line 122 of NFT marketplace.sol \n\n    /*\n    *  map over items returned from smart contract and format \n    *  them as well as fetch their token metadata\n    */\n    const items = await Promise.all(data.map(async i => {\n      const tokenUri = await contract.tokenURI(i.tokenId)\n      const meta = await axios.get(tokenUri) // while working with IPFS, we'll be uploading a json representation of this NFT, which will hold different information\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.data.image,\n        name: meta.data.name,\n        description: meta.data.description,\n      }\n      return item\n    }))\n    setNfts(items)\n    setLoadingState('loaded') \n  }\n  async function buyNft(nft) {\n    /* needs the user to sign the transaction usinf wallet, so will use Web3Provider and sign it */\n    const web3Modal = new Web3Modal()\n    const connection = await web3Modal.connect()\n    const provider = new ethers.providers.Web3Provider(connection)\n    const signer = provider.getSigner() // signing the tx\n    const contract = new ethers.Contract(marketplaceAddress, NFTMarketplace.abi, signer) // we now pass signer as the third arguement\n\n    /* user will be prompted to pay the asking proces to complete the transaction */\n    const price = ethers.utils.parseUnits(nft.price.toString(), 'ether')   \n    const transaction = await contract.createMarketSale(nft.tokenId, {\n      value: price // this amount of money will be deducted from user's wallrt to another user's wallet\n    })\n    await transaction.wait() // wait bcz we will now remove that NFT and relaod the remaining NFTs\n    loadNFTs() // we will gey 1 NFT less\n  }\n  if (loadingState === 'loaded' && !nfts.length) return (<h1 className=\"px-20 py-10 text-3xl\">No items in marketplace</h1>)\n  // !nfts.length means that array is empty\n\n\n  // now setting the UI\n  return (\n   \n    <div className=\"flex justify-center\">   \n      <div className=\"px-3\" style={{ maxWidth: '1600px' }}>\n        <div className=\"grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-4 pt-4\">\n          {\n            nfts.map((nft, i) => (\n              <div key={i} className=\"border shadow rounded-xl overflow-hidden\">\n                <img src={nft.image} />\n                <div className=\"p-2\">\n                <p style={{ height: '14px' }} className=\"text-1xl  text-center font-semibold text-white\">{nft.name}</p>\n                  <div style={{ height: '20px', overflow: 'hidden' }}>\n                    <p className=\"text-gray-400\">{nft.description}</p>\n                  </div>\n                </div>\n                <div className=\"p-3 bg-black\">\n                  <p className=\"text-1xl font-bold text-white\">{nft.price} MATIC</p>\n                  <button className=\"mt-4 w-full bg-lime-600 text-white font-bold py-2 px-12 rounded\" onClick={() => buyNft(nft)}>Buy</button>\n                  \n                </div>\n              </div>\n            ))\n          }\n        </div>\n        <br></br>\n      <br></br>\n      <br></br>\n      </div>\n      \n      </div>\n\n  )\n}","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\my-nfts.js",["49","50"],[],"import { ethers } from 'ethers'\r\nimport { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport Web3Modal from 'web3modal'\r\nimport { useRouter } from 'next/router'\r\nimport Link from 'next/link' //linking to other pages\r\n\r\nimport {\r\n  marketplaceAddress\r\n} from '../config'\r\n\r\nimport NFTMarketplace from '../artifacts/contracts/NFTMarketplace.sol/NFTMarketplace.json'\r\n\r\nexport default function MyAssets() {\r\n  const [nfts, setNfts] = useState([])\r\n  const [loadingState, setLoadingState] = useState('not-loaded')\r\n  const router = useRouter()\r\n  useEffect(() => {\r\n    loadNFTs()\r\n  }, [])\r\n  async function loadNFTs() {\r\n    const web3Modal = new Web3Modal({\r\n      network: \"mainnet\",\r\n      cacheProvider: true,\r\n    })\r\n    const connection = await web3Modal.connect()\r\n    const provider = new ethers.providers.Web3Provider(connection)\r\n    const signer = provider.getSigner() // we need to know who the msg.sender is\r\n\r\n    const marketplaceContract = new ethers.Contract(marketplaceAddress, NFTMarketplace.abi, signer)\r\n    const data = await marketplaceContract.fetchMyNFTs()\r\n\r\n    const items = await Promise.all(data.map(async i => {\r\n      const tokenURI = await marketplaceContract.tokenURI(i.tokenId)\r\n      const meta = await axios.get(tokenURI)\r\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\r\n      let item = {\r\n        price,\r\n        tokenId: i.tokenId.toNumber(),\r\n        seller: i.seller,\r\n        owner: i.owner,\r\n        image: meta.data.image,\r\n        tokenURI\r\n      }\r\n      return item\r\n    }))\r\n    setNfts(items)\r\n    setLoadingState('loaded') \r\n  }\r\n  function listNFT(nft) {\r\n    //console.log('nft:', nft)\r\n    router.push(`/resell-nft?id=${nft.tokenId}&tokenURI=${nft.tokenURI}`)\r\n  }\r\n  if (loadingState === 'loaded' && !nfts.length) return (\r\n    <div>\r\n      <h1 className=\"py-10 px-20 font-bold text-2xl text-white\">No NFTs Owned :(</h1>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <Link href=\"/\">\r\n        <a className=\"font-semibold text-center text-3xl px-3 py-2 rounded text-white hover:text-lime-600\">\r\n          <div className='underline underline-offset-4'>Buy NFTs</div>\r\n        </a>\r\n      </Link>\r\n      \r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      <br></br>\r\n      \r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <div className=\"bg-black h-full\">\r\n    <br></br>\r\n        <div className='text-white text-center text-3xl'> My NFT Collection</div>\r\n    <br></br>\r\n    <div className=\"flex justify-center bg-black h-full\">\r\n      <div className=\"p-4\">\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-6 gap-4 pt-4\">\r\n          {\r\n            nfts.map((nft, i) => (\r\n              <div key={i} className=\"border shadow rounded-xl overflow-hidden\">\r\n                <img src={nft.image} className=\"rounded\" />\r\n                <div className=\"p-4 bg-black\">\r\n                  <p className=\"text-1xl font-bold text-white \">Price - {nft.price} MATIC</p>\r\n                  <button className=\"mt-4 w-full bg-blue-400 text-white text-lg font-bold py-2 px-12 rounded\" onClick={() => listNFT(nft)}>List</button>\r\n                </div>\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\resell-nft.js",["51","52","53"],[],"import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { useRouter } from 'next/router'\r\nimport axios from 'axios'\r\nimport Web3Modal from 'web3modal'\r\n\r\nimport {\r\n  marketplaceAddress\r\n} from '../config'\r\n\r\nimport NFTMarketplace from '../artifacts/contracts/NFTMarketplace.sol/NFTMarketplace.json'\r\n\r\nexport default function ResellNFT() {\r\n  const [formInput, updateFormInput] = useState({ price: '', image: '' })\r\n  const router = useRouter()\r\n  const { id, tokenURI } = router.query\r\n  const { image, price } = formInput\r\n\r\n  useEffect(() => {\r\n    fetchNFT()\r\n  }, [id])\r\n\r\n  async function fetchNFT() {\r\n    if (!tokenURI) return\r\n    const meta = await axios.get(tokenURI)\r\n    updateFormInput(state => ({ ...state, image: meta.data.image }))\r\n  }\r\n\r\n  async function listNFTForSale() {\r\n    if (!price) return\r\n    const web3Modal = new Web3Modal()\r\n    const connection = await web3Modal.connect()\r\n    const provider = new ethers.providers.Web3Provider(connection)\r\n    const signer = provider.getSigner()\r\n\r\n    const priceFormatted = ethers.utils.parseUnits(formInput.price, 'ether')\r\n    let contract = new ethers.Contract(marketplaceAddress, NFTMarketplace.abi, signer)\r\n    let listingPrice = await contract.getListingPrice()\r\n\r\n    listingPrice = listingPrice.toString()\r\n    let transaction = await contract.resellToken(id, priceFormatted, { value: listingPrice })\r\n    await transaction.wait()\r\n   \r\n    router.push('/')\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      <div className=\"w-1/2 flex flex-col pb-12\">\r\n        <input\r\n          placeholder=\"Asset Price (MATIC)\"\r\n          className=\"mt-2 border rounded p-4\"\r\n          onChange={e => updateFormInput({ ...formInput, price: e.target.value })}\r\n        />\r\n        {\r\n          image && (\r\n            <img className=\"rounded mt-4\" width=\"300\" src={image} />\r\n          )\r\n        }\r\n        <button onClick={listNFTForSale} className=\"font-bold mt-4 bg-lime-600 text-white rounded p-4 shadow-lg\">\r\n          List NFT\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\asus\\Desktop\\Thapa React Tutorials\\NFT Marketplace Nader\\Dhaval-polygon-NFT-marketplace\\pages\\_app.js",["54"],[],"// used for layout and navigation and linking to other pages\n\n/* pages/_app.js */\nimport '../styles/globals.css'\nimport Image from 'next/image'\nimport Link from 'next/link' //linking to other pages\nimport { urlSource } from 'ipfs-http-client'\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <div>\n    <div className='sticky top-0 left-0 right-0'> \n      <nav className=\"flex items-center bg-white p-3 flex-wrap\">\n        <span className=\"text-3xl font-bold text-lime-600\">NFT</span>\n        <span className=\"text-3xl font-bold text-white\">-</span>\n        <span className=\"text-3xl font-bold text-black\">Marketplace</span>\n          <div\n            className=\"lg:inline-flex lg:flex-row lg:ml-auto lg:w-auto w-full lg:items-center items-start flex flex-col lg:h-auto text-lime-500\"\n          >\n            <Link href=\"/\">\n              <a className=\"lg:inline-flex font-semibold lg:w-auto w-full px-3 py-2 rounded text-black items-center justify-center hover:bg-black hover:text-lime-500\">\n                <span>Home</span>\n              </a>\n            </Link>\n            \n            <Link href=\"/create-nft\">\n              <a className=\"lg:inline-flex font-semibold lg:w-auto w-full px-3 py-2 rounded text-black items-center justify-center hover:bg-black hover:text-lime-500\">\n                <span>Sell NFT</span>\n              </a>\n            </Link>\n            \n            <Link href=\"/my-nfts\">\n              <a className=\"lg:inline-flex font-semibold lg:w-auto w-full px-3 py-2 rounded text-black items-center justify-center hover:bg-black hover:text-lime-500\">\n                <span>My NFTs</span>\n              </a>\n            </Link>\n            \n            <Link href=\"/dashboard\">\n              <a className=\"lg:inline-flex font-semibold lg:w-auto w-full px-3 py-2 rounded text-black items-center justify-center hover:bg-black hover:text-lime-500\">\n                <span>Dashboard</span>\n              </a>\n            </Link>\n          </div>\n      </nav>\n    </div>\n      <div className='bg-black ' >\n      <img className=\"h-60 w-screen\" src=\"/NFTbanner.png\" alt=\"\" />\n    </div>\n    \n    <div className='bg-black '>\n       <Component {...pageProps} />\n      </div>\n    </div>\n  )\n}\n\nexport default MyApp\n\n\n\n\n",{"ruleId":"55","severity":1,"message":"56","line":102,"column":13,"nodeType":"57","endLine":102,"endColumn":71},{"ruleId":"58","severity":1,"message":"59","line":102,"column":13,"nodeType":"57","endLine":102,"endColumn":71},{"ruleId":"55","severity":1,"message":"56","line":58,"column":17,"nodeType":"57","endLine":58,"endColumn":60},{"ruleId":"58","severity":1,"message":"59","line":58,"column":17,"nodeType":"57","endLine":58,"endColumn":60},{"ruleId":"55","severity":1,"message":"56","line":98,"column":17,"nodeType":"57","endLine":98,"endColumn":40},{"ruleId":"58","severity":1,"message":"59","line":98,"column":17,"nodeType":"57","endLine":98,"endColumn":40},{"ruleId":"55","severity":1,"message":"56","line":90,"column":17,"nodeType":"57","endLine":90,"endColumn":60},{"ruleId":"58","severity":1,"message":"59","line":90,"column":17,"nodeType":"57","endLine":90,"endColumn":60},{"ruleId":"60","severity":1,"message":"61","line":21,"column":6,"nodeType":"62","endLine":21,"endColumn":10,"suggestions":"63"},{"ruleId":"55","severity":1,"message":"56","line":57,"column":13,"nodeType":"57","endLine":57,"endColumn":69},{"ruleId":"58","severity":1,"message":"59","line":57,"column":13,"nodeType":"57","endLine":57,"endColumn":69},{"ruleId":"55","severity":1,"message":"56","line":47,"column":7,"nodeType":"57","endLine":47,"endColumn":68},"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchNFT'. Either include it or remove the dependency array.","ArrayExpression",["64"],{"desc":"65","fix":"66"},"Update the dependencies array to be: [fetchNFT, id]",{"range":"67","text":"68"},[598,602],"[fetchNFT, id]"]